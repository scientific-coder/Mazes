{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name kdtree, :imports nil, :requires nil, :uses nil, :defs {inside-interval? {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 227, :column 8, :end-line 227, :end-column 24, :private true, :arglists (quote ([interval point]))}, :private true, :name kdtree/inside-interval?, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 24, :method-params ([interval point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([interval point]))}, points= {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 109, :column 8, :end-line 109, :end-column 15, :private true, :arglists (quote ([a b])), :doc "Compares 2 points represented by arrays of doubles and return true if they are equal"}, :private true, :name kdtree/points=, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 15, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Compares 2 points represented by arrays of doubles and return true if they are equal"}, nearest-neighbor {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 214, :column 7, :end-line 214, :end-column 23, :arglists (quote ([tree point] [tree point n])), :doc "Compute n nearest neighbors for a point. If n is\nomitted, the result is the nearest neighbor;\notherwise, the result is a list of length n.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tree point] [tree point n]), :arglists ([tree point] [tree point n]), :arglists-meta (nil nil)}}, :name kdtree/nearest-neighbor, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([tree point] [tree point n]), :arglists ([tree point] [tree point n]), :arglists-meta (nil nil)}, :method-params ([tree point] [tree point n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 3, :fn-var true, :arglists ([tree point] [tree point n]), :doc "Compute n nearest neighbors for a point. If n is\nomitted, the result is the nearest neighbor;\notherwise, the result is a list of length n."}, insert-internal {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 54, :column 8, :end-line 54, :end-column 23, :private true, :arglists (quote ([tree point depth point-meta]))}, :private true, :name kdtree/insert-internal, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 23, :method-params ([tree point depth point-meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tree point depth point-meta]))}, nearest-neighbor-internal {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 184, :column 8, :end-line 184, :end-column 33, :private true, :arglists (quote ([tree point n dimension best]))}, :private true, :name kdtree/nearest-neighbor-internal, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 33, :method-params ([tree point n dimension best]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 5, :fn-var true, :arglists (quote ([tree point n dimension best]))}, insert {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 70, :column 7, :end-line 70, :end-column 13, :arglists (quote ([tree point])), :doc "Adds a point to an existing tree."}, :name kdtree/insert, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 13, :method-params ([tree point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree point])), :doc "Adds a point to an existing tree."}, find-min {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 98, :column 7, :end-line 98, :end-column 15, :arglists (quote ([tree dimension])), :doc "Locate the point with the smallest value in a given dimension.\nUsed internally by the delete function. Runs in O(√n) time for a\nbalanced tree."}, :name kdtree/find-min, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 15, :method-params ([tree dimension]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree dimension])), :doc "Locate the point with the smallest value in a given dimension.\nUsed internally by the delete function. Runs in O(√n) time for a\nbalanced tree."}, Result {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name kdtree/Result, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 18, :type true, :column 12, :internal-ctor true, :line 7, :record true, :end-line 7, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, interval-search-internal {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 239, :column 8, :end-line 239, :end-column 32, :private true, :arglists (quote ([tree interval depth accum]))}, :private true, :name kdtree/interval-search-internal, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 32, :method-params ([tree interval depth accum]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 4, :fn-var true, :arglists (quote ([tree interval depth accum]))}, ->Result {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 7, :column 12, :end-line 7, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([point dist-squared]))}, :name kdtree/->Result, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 18, :method-params ([point dist-squared]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point dist-squared]))}, delete {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 159, :column 7, :end-line 159, :end-column 13, :arglists (quote ([tree point])), :doc "Delete value at the given point. Runs in O(log n) time for a balanced tree."}, :name kdtree/delete, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 13, :method-params ([tree point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree point])), :doc "Delete value at the given point. Runs in O(log n) time for a balanced tree."}, map->Node {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 6, :column 12, :end-line 6, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__15740]))}, :name kdtree/map->Node, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 16, :method-params ([G__15740]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__15740]))}, delete-internal {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 117, :column 8, :end-line 117, :end-column 23, :private true, :arglists (quote ([tree point depth]))}, :private true, :name kdtree/delete-internal, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 23, :method-params ([tree point depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tree point depth]))}, find-min-internal {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 77, :column 8, :end-line 77, :end-column 25, :private true, :arglists (quote ([tree dimension depth]))}, :private true, :name kdtree/find-min-internal, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 25, :method-params ([tree dimension depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tree dimension depth]))}, map->Result {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 7, :column 12, :end-line 7, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__15748]))}, :name kdtree/map->Result, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 18, :method-params ([G__15748]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__15748]))}, ->Node {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 6, :column 12, :end-line 6, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([left right value]))}, :name kdtree/->Node, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 16, :method-params ([left right value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([left right value]))}, interval-search {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 264, :column 7, :end-line 264, :end-column 22, :arglists (quote ([tree interval])), :doc "Find all points inside given interval.\nInterval is a sequence of boundaries for each dimension.\nExample: interval 0≤x≤10, 5≤y≤20 represented as [[0 10] [5 20]]"}, :name kdtree/interval-search, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 22, :method-params ([tree interval]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree interval])), :doc "Find all points inside given interval.\nInterval is a sequence of boundaries for each dimension.\nExample: interval 0≤x≤10, 5≤y≤20 represented as [[0 10] [5 20]]"}, build-tree-internal {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 21, :column 8, :end-line 21, :end-column 27, :private true, :arglists (quote ([points depth]))}, :private true, :name kdtree/build-tree-internal, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 27, :method-params ([points depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([points depth]))}, dist-squared {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 10, :column 8, :end-line 10, :end-column 20, :private true, :arglists (quote ([a b])), :doc "Compute the K-dimensional distance between two points"}, :private true, :name kdtree/dist-squared, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 20, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Compute the K-dimensional distance between two points"}, build-tree {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 46, :column 7, :end-line 46, :end-column 17, :arglists (quote ([points])), :doc "Construct a Kd-tree from points. Assumes all\npoints are of the same dimension."}, :name kdtree/build-tree, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 17, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points])), :doc "Construct a Kd-tree from points. Assumes all\npoints are of the same dimension."}, insert-sorted! {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :line 166, :column 8, :end-line 166, :end-column 22, :private true, :arglists (quote ([vec value n])), :doc "Inserts value to sorted transient vector. Vector will not grow\nbigger than n elements."}, :private true, :name kdtree/insert-sorted!, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 22, :method-params ([vec value n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vec value n])), :doc "Inserts value to sorted transient vector. Vector will not grow\nbigger than n elements."}, Node {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name kdtree/Node, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/ac0/aixfad/kdtree.cljc", :end-column 16, :type true, :column 12, :internal-ctor true, :line 6, :record true, :end-line 6, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else left :default :value double value :dist-squared :right :point :tag dist-squared right :left point}, :order [:left :right :value left right value :point :dist-squared point dist-squared :tag double :else :default]}, :doc nil}