{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name thi.ng.geom.matrix, :imports nil, :requires {thi.ng.geom.utils thi.ng.geom.utils, thi.ng.geom.core thi.ng.geom.core, gu thi.ng.geom.utils, v thi.ng.geom.vector, thi.ng.xerror.core thi.ng.xerror.core, thi.ng.math.core thi.ng.math.core, m thi.ng.math.core, err thi.ng.xerror.core, thi.ng.geom.vector thi.ng.geom.vector, g thi.ng.geom.core}, :uses {TWO_PI thi.ng.math.core, vec3 thi.ng.geom.vector, PI thi.ng.math.core, V3 thi.ng.geom.vector, vec2 thi.ng.geom.vector, *eps* thi.ng.math.core, V3X thi.ng.geom.vector}, :defs {frustum-bounds {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 673, :column 7, :end-line 673, :end-column 21, :arglists (quote ([fovy aspect near])), :doc "Given vertical FOV in degrees, aspect ratio and near plane\n  distance, computes map of left/right/top/bottom view frustum\n  bounds."}, :name thi.ng.geom.matrix/frustum-bounds, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 21, :method-params ([fovy aspect near]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 673, :end-line 673, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fovy aspect near])), :doc "Given vertical FOV in degrees, aspect ratio and near plane\n  distance, computes map of left/right/top/bottom view frustum\n  bounds."}, unproject-point {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 797, :column 7, :end-line 797, :end-column 22, :arglists (quote ([p view proj screen-rect] [p inv-mat {[vx vy] :p, [w h] :size}] [[x y z] inv-mat vx vy w h])), :doc "Takes a vec3 in screenspace, view matrix, projection matrix and\n  screen rect. A second arity exists accepting an already inverted\n  view-projection matrix instead of having to supply view & proj\n  separately. Returns vector in world space or nil if matrix is not\n  invertible.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([p view proj screen-rect] [p inv-mat {[vx vy] :p, [w h] :size}] [[x y z] inv-mat vx vy w h]), :arglists ([p view proj screen-rect] [p inv-mat {[vx vy] :p, [w h] :size}] [[x y z] inv-mat vx vy w h]), :arglists-meta (nil nil nil)}}, :name thi.ng.geom.matrix/unproject-point, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([p view proj screen-rect] [p inv-mat {[vx vy] :p, [w h] :size}] [[x y z] inv-mat vx vy w h]), :arglists ([p view proj screen-rect] [p inv-mat {[vx vy] :p, [w h] :size}] [[x y z] inv-mat vx vy w h]), :arglists-meta (nil nil nil)}, :method-params ([p view proj screen-rect] [p inv-mat {[vx vy] :p, [w h] :size}] [[x y z] inv-mat vx vy w h]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 797, :end-line 797, :max-fixed-arity 6, :fn-var true, :arglists ([p view proj screen-rect] [p inv-mat {[vx vy] :p, [w h] :size}] [[x y z] inv-mat vx vy w h]), :doc "Takes a vec3 in screenspace, view matrix, projection matrix and\n  screen rect. A second arity exists accepting an already inverted\n  view-projection matrix instead of having to supply view & proj\n  separately. Returns vector in world space or nil if matrix is not\n  invertible."}, project-point {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 783, :column 7, :end-line 783, :end-column 20, :arglists (quote ([p mvp vtx])), :doc "Projects 3D point p using MVP matrix into 2D and the applies\n  viewport matrix to produce screen coordinate."}, :name thi.ng.geom.matrix/project-point, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 20, :method-params ([p mvp vtx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 783, :end-line 783, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p mvp vtx])), :doc "Projects 3D point p using MVP matrix into 2D and the applies\n  viewport matrix to produce screen coordinate."}, project-point-z {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 790, :column 7, :end-line 790, :end-column 22, :arglists (quote ([p mvp vtx])), :doc "Like project-point, but returns vec3 with z component representing\n  depth value."}, :name thi.ng.geom.matrix/project-point-z, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 22, :method-params ([p mvp vtx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 790, :end-line 790, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p mvp vtx])), :doc "Like project-point, but returns vec3 with z component representing\n  depth value."}, frustum-planes {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 685, :column 7, :end-line 685, :end-column 21, :arglists (quote ([view proj])), :doc "Given a view matrix & projection matrix, returns vector of the\n  frustum's 6 plane parameters, each a 2-element vector: [normal w]\n  Planes are ordered: left, right, top, bottom, near, far. These\n  coefficients can then (for example) be used for AABB-frustum culling\n  with thi.ng.geom.utils.intersect/intersect-aabb-frustum?"}, :name thi.ng.geom.matrix/frustum-planes, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 21, :method-params ([view proj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 685, :end-line 685, :max-fixed-arity 2, :fn-var true, :arglists (quote ([view proj])), :doc "Given a view matrix & projection matrix, returns vector of the\n  frustum's 6 plane parameters, each a 2-element vector: [normal w]\n  Planes are ordered: left, right, top, bottom, near, far. These\n  coefficients can then (for example) be used for AABB-frustum culling\n  with thi.ng.geom.utils.intersect/intersect-aabb-frustum?"}, ->Matrix32 {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 26, :column 10, :end-line 26, :end-column 18, :protocols #{thi.ng.geom.core/ITranslate cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection thi.ng.math.core/IDeltaEquals thi.ng.geom.matrix/Object thi.ng.math.core/IInvert cljs.core/ICounted cljs.core/ISeq cljs.core/INext thi.ng.math.core/IMathOps thi.ng.geom.core/ITransform cljs.core/ISeqable cljs.core/IMeta thi.ng.geom.core/IRotate thi.ng.geom.core/IScale thi.ng.geom.core/IShear thi.ng.math.core/IDeterminant thi.ng.math.core/ITranspose thi.ng.geom.core/IVectorTransform cljs.core/ISequential cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([m00 m01 m02 m10 m11 m12 _hasheq _meta]))}, :protocols #{thi.ng.geom.core/ITranslate cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection thi.ng.math.core/IDeltaEquals thi.ng.geom.matrix/Object thi.ng.math.core/IInvert cljs.core/ICounted cljs.core/ISeq cljs.core/INext thi.ng.math.core/IMathOps thi.ng.geom.core/ITransform cljs.core/ISeqable cljs.core/IMeta thi.ng.geom.core/IRotate thi.ng.geom.core/IScale thi.ng.geom.core/IShear thi.ng.math.core/IDeterminant thi.ng.math.core/ITranspose thi.ng.geom.core/IVectorTransform cljs.core/ISequential cljs.core/IWithMeta}, :name thi.ng.geom.matrix/->Matrix32, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 18, :method-params ([m00 m01 m02 m10 m11 m12 _hasheq _meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 26, :end-line 26, :max-fixed-arity 8, :fn-var true, :arglists (quote ([m00 m01 m02 m10 m11 m12 _hasheq _meta])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, viewport-matrix {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 771, :column 7, :end-line 771, :end-column 22, :arglists (quote ([width height] [width height invert-y?])), :doc "Given viewport width/height, computes a 2D transformation matrix\n  mapping normalized coordinates to screen space. If invert-y? is\n  true, the Y axis is flipped.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([width height] [width height invert-y?]), :arglists ([width height] [width height invert-y?]), :arglists-meta (nil nil)}}, :name thi.ng.geom.matrix/viewport-matrix, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([width height] [width height invert-y?]), :arglists ([width height] [width height invert-y?]), :arglists-meta (nil nil)}, :method-params ([width height] [width height invert-y?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 771, :end-line 771, :max-fixed-arity 3, :fn-var true, :arglists ([width height] [width height invert-y?]), :doc "Given viewport width/height, computes a 2D transformation matrix\n  mapping normalized coordinates to screen space. If invert-y? is\n  true, the Y axis is flipped."}, look-at {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 754, :column 7, :end-line 754, :end-column 14, :arglists (quote ([eye target up])), :doc "Returns a matrix that puts the camera at the eye position looking\n  toward the target point with the given up direction."}, :name thi.ng.geom.matrix/look-at, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 14, :method-params ([eye target up]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 754, :end-line 754, :max-fixed-arity 3, :fn-var true, :arglists (quote ([eye target up])), :doc "Returns a matrix that puts the camera at the eye position looking\n  toward the target point with the given up direction."}, matrix32 {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 622, :column 7, :end-line 622, :end-column 15, :arglists (quote ([] [[m00 m01 m02 m10 m11 m12]] [m00 m01 m02 m10 m11 m12])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([] [[m00 m01 m02 m10 m11 m12]] [m00 m01 m02 m10 m11 m12]), :arglists ([] [[m00 m01 m02 m10 m11 m12]] [m00 m01 m02 m10 m11 m12]), :arglists-meta (nil nil nil)}}, :name thi.ng.geom.matrix/matrix32, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([] [[m00 m01 m02 m10 m11 m12]] [m00 m01 m02 m10 m11 m12]), :arglists ([] [[m00 m01 m02 m10 m11 m12]] [m00 m01 m02 m10 m11 m12]), :arglists-meta (nil nil nil)}, :method-params ([] [[m00 m01 m02 m10 m11 m12]] [m00 m01 m02 m10 m11 m12]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 622, :end-line 622, :max-fixed-arity 6, :fn-var true, :arglists ([] [[m00 m01 m02 m10 m11 m12]] [m00 m01 m02 m10 m11 m12])}, M32 {:name thi.ng.geom.matrix/M32, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 608, :column 1, :end-line 608, :end-column 9, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 608, :column 6, :end-line 608, :end-column 9}}, Matrix32 {:num-fields 8, :protocols #{thi.ng.geom.core/ITranslate cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection thi.ng.math.core/IDeltaEquals thi.ng.geom.matrix/Object thi.ng.math.core/IInvert cljs.core/ICounted cljs.core/ISeq cljs.core/INext thi.ng.math.core/IMathOps thi.ng.geom.core/ITransform cljs.core/ISeqable cljs.core/IMeta thi.ng.geom.core/IRotate thi.ng.geom.core/IScale thi.ng.geom.core/IShear thi.ng.math.core/IDeterminant thi.ng.math.core/ITranspose thi.ng.geom.core/IVectorTransform cljs.core/ISequential cljs.core/IWithMeta}, :name thi.ng.geom.matrix/Matrix32, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 18, :type true, :column 10, :line 26, :record false, :end-line 26, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, M44 {:name thi.ng.geom.matrix/M44, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 614, :column 1, :end-line 614, :end-column 9, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 614, :column 6, :end-line 614, :end-column 9}}, look-at-vectors {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 745, :column 7, :end-line 745, :end-column 22, :arglists (quote ([ex ey ez tx ty tz])), :doc "Takes 6 numbers representing eye & target positions, computes up\n  vector and returns vector of all three vec3's."}, :name thi.ng.geom.matrix/look-at-vectors, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 22, :method-params ([ex ey ez tx ty tz]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 745, :end-line 745, :max-fixed-arity 6, :fn-var true, :arglists (quote ([ex ey ez tx ty tz])), :doc "Takes 6 numbers representing eye & target positions, computes up\n  vector and returns vector of all three vec3's."}, ortho {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 703, :column 7, :end-line 703, :end-column 12, :arglists (quote ([] [view-rect] [left top right bottom near far])), :doc "Returns an orthographic projection matrix, in which objects are the\n  same size no matter how far away or nearby they are. This emulates\n  the OpenGL function glOrtho().", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([] [view-rect] [left top right bottom near far]), :arglists ([] [view-rect] [left top right bottom near far]), :arglists-meta (nil nil nil)}}, :name thi.ng.geom.matrix/ortho, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([] [view-rect] [left top right bottom near far]), :arglists ([] [view-rect] [left top right bottom near far]), :arglists-meta (nil nil nil)}, :method-params ([] [view-rect] [left top right bottom near far]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 703, :end-line 703, :max-fixed-arity 6, :fn-var true, :arglists ([] [view-rect] [left top right bottom near far]), :doc "Returns an orthographic projection matrix, in which objects are the\n  same size no matter how far away or nearby they are. This emulates\n  the OpenGL function glOrtho()."}, Matrix44 {:num-fields 18, :protocols #{thi.ng.geom.core/ITranslate cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection thi.ng.math.core/IDeltaEquals thi.ng.geom.core/IRotate3D thi.ng.geom.matrix/Object thi.ng.math.core/IInvert cljs.core/ICounted cljs.core/ISeq cljs.core/INext thi.ng.math.core/IMathOps thi.ng.geom.core/ITransform cljs.core/ISeqable cljs.core/IMeta thi.ng.geom.core/IRotate thi.ng.geom.core/IScale thi.ng.math.core/IDeterminant thi.ng.math.core/ITranspose thi.ng.geom.core/IVectorTransform cljs.core/ISequential cljs.core/IWithMeta}, :name thi.ng.geom.matrix/Matrix44, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 18, :type true, :column 10, :line 238, :record false, :end-line 238, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, perspective {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 723, :column 7, :end-line 723, :end-column 18, :arglists (quote ([fovy aspect near far])), :doc "Returns a perspective transform matrix, which makes far away\n  objects appear smaller than nearby objects. `fovy` is the vertical\n  angle of the field of view in degrees. The `aspect` argument should\n  be a rect, a map with a `:size` key (vec2) or the width divided by\n  the height of your viewport. `near` and `far` are the distances of\n  the clipping planes."}, :name thi.ng.geom.matrix/perspective, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 18, :method-params ([fovy aspect near far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 723, :end-line 723, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fovy aspect near far])), :doc "Returns a perspective transform matrix, which makes far away\n  objects appear smaller than nearby objects. `fovy` is the vertical\n  angle of the field of view in degrees. The `aspect` argument should\n  be a rect, a map with a `:size` key (vec2) or the width divided by\n  the height of your viewport. `near` and `far` are the distances of\n  the clipping planes."}, matrix44->matrix33 {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 637, :column 7, :end-line 637, :end-column 25, :arglists (quote ([[m00 m01 m02 _ m10 m11 m12 _ m20 m21 m22]]))}, :name thi.ng.geom.matrix/matrix44->matrix33, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 25, :method-params ([p__12207]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 637, :end-line 637, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[m00 m01 m02 _ m10 m11 m12 _ m20 m21 m22]]))}, ->Matrix44 {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 238, :column 10, :end-line 238, :end-column 18, :protocols #{thi.ng.geom.core/ITranslate cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection thi.ng.math.core/IDeltaEquals thi.ng.geom.core/IRotate3D thi.ng.geom.matrix/Object thi.ng.math.core/IInvert cljs.core/ICounted cljs.core/ISeq cljs.core/INext thi.ng.math.core/IMathOps thi.ng.geom.core/ITransform cljs.core/ISeqable cljs.core/IMeta thi.ng.geom.core/IRotate thi.ng.geom.core/IScale thi.ng.math.core/IDeterminant thi.ng.math.core/ITranspose thi.ng.geom.core/IVectorTransform cljs.core/ISequential cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33 _hasheq _meta]))}, :protocols #{thi.ng.geom.core/ITranslate cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection thi.ng.math.core/IDeltaEquals thi.ng.geom.core/IRotate3D thi.ng.geom.matrix/Object thi.ng.math.core/IInvert cljs.core/ICounted cljs.core/ISeq cljs.core/INext thi.ng.math.core/IMathOps thi.ng.geom.core/ITransform cljs.core/ISeqable cljs.core/IMeta thi.ng.geom.core/IRotate thi.ng.geom.core/IScale thi.ng.math.core/IDeterminant thi.ng.math.core/ITranspose thi.ng.geom.core/IVectorTransform cljs.core/ISequential cljs.core/IWithMeta}, :name thi.ng.geom.matrix/->Matrix44, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 18, :method-params ([m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33 _hasheq _meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 238, :end-line 238, :max-fixed-arity 18, :fn-var true, :arglists (quote ([m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33 _hasheq _meta])), :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, matrix44->matrix33-rot {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 641, :column 7, :end-line 641, :end-column 29, :arglists (quote ([[m00 m01 m02 _ m10 m11 m12 _ m20 m21 m22]]))}, :name thi.ng.geom.matrix/matrix44->matrix33-rot, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 29, :method-params ([p__12214]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 641, :end-line 641, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[m00 m01 m02 _ m10 m11 m12 _ m20 m21 m22]]))}, frustum {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 657, :column 7, :end-line 657, :end-column 14, :arglists (quote ([l t r b n f])), :doc "Sets up a viewing frustum, shaped like a truncated pyramid with the\n  camera where the tip of the pyramid would be.\n  This emulates the OpenGL function glFrustum()."}, :name thi.ng.geom.matrix/frustum, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 14, :method-params ([l t r b n f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 6, :fn-var true, :arglists (quote ([l t r b n f])), :doc "Sets up a viewing frustum, shaped like a truncated pyramid with the\n  camera where the tip of the pyramid would be.\n  This emulates the OpenGL function glFrustum()."}, matrix44 {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 629, :column 7, :end-line 629, :end-column 15, :arglists (quote ([] [[m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]] [m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33])), :top-fn {:variadic false, :max-fixed-arity 16, :method-params ([] [[m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]] [m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]), :arglists ([] [[m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]] [m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]), :arglists-meta (nil nil nil)}}, :name thi.ng.geom.matrix/matrix44, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 16, :method-params ([] [[m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]] [m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]), :arglists ([] [[m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]] [m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]), :arglists-meta (nil nil nil)}, :method-params ([] [[m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]] [m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 629, :end-line 629, :max-fixed-arity 16, :fn-var true, :arglists ([] [[m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]] [m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33])}, perspective-frustum {:protocol-inline nil, :meta {:file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :line 741, :column 7, :end-line 741, :end-column 26, :arglists (quote ([fov aspect near far]))}, :name thi.ng.geom.matrix/perspective-frustum, :variadic false, :file "/home/bernard/.boot/cache/tmp/home/bernard/Documents/Workspace/my-Mazes/my-mazes/hdg/9yxuoa/main.out/thi/ng/geom/matrix.cljc", :end-column 26, :method-params ([fov aspect near far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 741, :end-line 741, :max-fixed-arity 4, :fn-var true, :arglists (quote ([fov aspect near far]))}}, :require-macros {mm thi.ng.math.macros, thi.ng.math.macros thi.ng.math.macros, gmc thi.ng.geom.macros.matrix, thi.ng.geom.macros.matrix thi.ng.geom.macros.matrix}, :cljs.analyzer/constants {:seen #{m01 m22 :bottom m02 :top m03 m21 m12 m13 _meta _hasheq m33 :size m23 m11 m30 :right m00 :mutable m32 m10 m31 :p :left m20}, :order [m00 m01 m02 m10 m11 m12 _hasheq :mutable _meta m03 m13 m20 m21 m22 m23 m30 m31 m32 m33 :left :right :top :bottom :size :p]}, :doc nil}